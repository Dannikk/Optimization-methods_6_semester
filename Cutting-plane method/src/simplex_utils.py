from scipy.optimize import linprog, setup

# c = [-400, -250, -50, -350, -400]
#
# A_eq = [
#     [0, 1, 0, 1, 0],
#     [1, 0, 0, 1, 0],
#     [0, 0, 10, 150, 0],
# ]
# b_eq = [1400, 800, 200000]
#
# A_ub = [
#     [0, 0, 10, 0, 250],
#     [0, 0, -1, 0, 0]
# ]
# b_ub = [150000, -100]

# c = [1400, 800, 200000, 150000, -100]
#
# A_ub = [
#     [1, 0, 0, 0, 0],
#     [0, 1, 0, 0, 0],
#     [0, 0, 10, 10, -1],
#     [1, 1, 150, 0, 0]
# ]
# b_ub = [250, 400, 50, 350]
#
# A_eq = [[0, 0, 0, 250, 0]]
# b_eq = [400]

# c = [8, 2, 5, 3, 14, 10, 4, 5, 7, 15, 5, 1, 2, 1, 10, 6, 3, 2, 4, 15]
# A_eq = [
#     [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
#     [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
#     [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
#     [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
#     [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
#     [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
# ]
# b_eq = [8, 3, 11, 5, 4, 5, 4, 9, 5]

c_ = [8, 2, 5, 3, 14, 0, 10, 4, 5, 7, 15, 0, 5, 1, 2, 1, 10, 0, 6, 3, 2, 4, 15, 0]
A_eq_ = [
    [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
]
b_eq_ = [9, 5, 12, 6, 4, 5, 4, 9, 5, 5]

# x1_bounds = (None, None)
# x2_bounds = (None, None)
# x3_bounds = (None, None)
# x4_bounds = (0, None)
# x5_bounds = (0, None)

# k = 1
# res = linprog(c, A_ub=A_eq, b_eq=b_eq,
#               method="simplex",
#               options={"maxiter": k})
# print("x[" + str(0) + "] = 0" + str(res.get("x")))
#
# while not res.get("success"):
#     k += 1
#     res = linprog(c, A_eq=A_eq, b_eq=b_eq,
#                   method="simplex",
#                   options={"maxiter": k})
#
#     print("x[" + str(k - 2) + "] = " + str(res.get("x")))


def solve_simplex_method(c: list, A: list, b: list):
    result = linprog(c, A_ub=A, b_ub=b, method='simplex', bounds=(None, None), options={'tol': 10**-12})
    # , options={'tol': 10**-12}
    return result
